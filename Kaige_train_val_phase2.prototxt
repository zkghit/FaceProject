name: "CaffeNet"
layer {
  name: "data"
  type: "Python"
  top: "data"
  top: "label"
  top: "landMark"
  include {
    phase: TRAIN
  } 
  python_param {
    module: "face_layers_phase2"
    layer: "FaceRecogDataLayer"
    param_str: "{\'faceImage_dir\': \'data/faceData\', \'batch\': 10, \'label_dir\': \'data/labelData\', \'mean\': (104.00699, 116.66877, 122.67892), \'totalImage\': 20, \'image_dimension\': 3, \'image_size\': 227, \'landMark_dir\': \'data/landMarkData\', \'feature_dimenstion\': 128}"
  }
}
layer {
  name: "data"
  type: "Python"
  top: "data"
  top: "label"
  top: "landMark"
  include {
    phase: TEST
  } 
  python_param {
    module: "face_layers_phase2"
    layer: "FaceRecogDataLayer"
    param_str: "{\'faceImage_dir\': \'data/faceData\', \'batch\': 10, \'label_dir\': \'data/labelData\', \'mean\': (104.00699, 116.66877, 122.67892), \'totalImage\': 20, \'image_dimension\': 3, \'image_size\': 227, \'landMark_dir\': \'data/landMarkData\', \'feature_dimenstion\': 128}"
  }
}


layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 96
    kernel_size: 11
    stride: 4
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm1"
  type: "LRN"
  bottom: "pool1"
  top: "norm1"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "norm1"
  top: "conv2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    # group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm2"
  type: "LRN"
  bottom: "pool2"
  top: "norm2"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "norm2"
  top: "conv3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "conv3"
  top: "conv4"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 192
    pad: 1
    kernel_size: 3
    # group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "conv4"
  top: "conv4"
}
layer {
  name: "conv5"
  type: "Convolution"
  bottom: "conv4"
  top: "conv5"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
    # group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu5"
  type: "ReLU"
  bottom: "conv5"
  top: "conv5"
}
layer {
  name: "pool5"
  type: "Pooling"
  bottom: "conv5"
  top: "pool5"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "fc6_FCN"         # Kaige modified name for Finetuning training
  type: "Convolution"    # Kaige modified, original: "InnerProduct"
  bottom: "pool5"
  top: "fc6_FCN"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {              # Kaige modified, original: inner_product_param
    num_output: 2048
	# Kaige added begin
	pad: 0
    kernel_size: 6
	# group: 2
	# Kaige added end
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6_FCN"
  top: "fc6_FCN"
}
layer {
  name: "drop6"
  type: "Dropout"
  bottom: "fc6_FCN"
  top: "fc6_FCN"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7_FCN"              # Kaige modified name for finetuning
  type: "Convolution"      # Kaige modified, original: "InnerProduct"
  bottom: "fc6_FCN"
  top: "fc7_FCN"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {     # Kaige modified, original: inner_product_param
    num_output: 2048
	# Kaige added begin
	pad: 0
	kernel_size: 1
	# group: 2
	# Kaige added end
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}


layer {
  name: "fc7_FCN2"              # Kaige modified name for finetuning
  type: "Convolution"      # Kaige modified, original: "InnerProduct"
  bottom: "fc6_FCN"
  top: "fc7_FCN2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {     # Kaige modified, original: inner_product_param
    num_output: 256
	# Kaige added begin
	pad: 0
	kernel_size: 1
	# Kaige added end
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}

layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7_FCN"
  top: "fc7_FCN"
}
layer {
  name: "drop7"
  type: "Dropout"
  bottom: "fc7_FCN"
  top: "fc7_FCN"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc8_KFCN"
  type: "Convolution"    # Kaige modified, original: "InnerProduct" 
  bottom: "fc7_FCN"
  top: "fc8_KFCN"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {    # Kaige modified, original: inner_product_param
    num_output: 2
	# Kaige added begin
	pad: 0
	kernel_size: 1
	group: 2
	# Kaige added end
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "fc8_KFCN"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss1"
  type: "SoftmaxWithLoss"
  bottom: "fc8_KFCN"
  bottom: "label"
  top: "loss1"
  loss_weight: 0.5
}

layer {
  name: "loss2"
  type: "EuclideanLoss"
  bottom: "fc7_FCN2"
  bottom: "landMark"
  top: "loss2"
  loss_weight: 0.5
}